<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>陈俊生的正经博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hentaicracker.com/"/>
  <updated>2017-08-13T05:34:42.000Z</updated>
  <id>http://hentaicracker.com/</id>
  
  <author>
    <name>Jason Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《硅谷钢铁侠——马斯克的冒险人生》读书笔记</title>
    <link href="http://hentaicracker.com/2017/08/06/2017-08-06/"/>
    <id>http://hentaicracker.com/2017/08/06/2017-08-06/</id>
    <published>2017-08-06T05:29:38.000Z</published>
    <updated>2017-08-13T05:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>这就是埃隆，不成功，便成仁，绝不放弃。</p>
</li>
<li><p>在随后的几年里，马斯克考虑开设网络银行，并于1995年在品尼高研究所实习期间公开讨论过这件事。年轻的马斯克面向科学家做了精彩的演讲，宣称传统金融业向互联网金融的转变是不可避免的趋势。</p>
</li>
<li><p>他黑白分明的衡量成败的标准与竞争对手们的截然不同，导致得出的结论也大相径庭。这样的态度在局外人看来也许不可理喻，但正是这种极端的哲学鞭策着马斯克和他的团队不断突破世俗的条框，追求心中的极致。</p>
</li>
<li><p>当马斯克在 2014 年宣布特斯拉将公开其所有专利时，分析师们试图确定他是不是在作秀或者其中是否隐藏了不明动机或圈套<br>。但马斯克的决定就是这么坦率，他希望人们制造并购买电动汽车。马斯克认为，人类的未来取决于此。如果公开特斯拉的专利意味着其他公司能够更容易地制造出电动汽车，那么这对人类来说是有利的，这些理念应该是免费的。</p>
</li>
<li><p>马斯克是有情有义之人，他以一种史诗般的方式呈现喜怒哀乐，他感受最深刻的是自己改变人类命运的使命，因而难以意识到他人的强烈情绪，以致他富有人情味的一面被掩盖，令他显得冷酷无情，没有顾及个体的想法和需求。而很可能正是这种人，才能将太空网络的奇思妙想变成现实。</p>
</li>
</ul>
<a id="more"></a>
<p>看这本书没留下很多笔记。主要原因我觉得应该是作者太过于流水账，很多马斯克的核心价值观没有更好的体现出来。要么是作者文笔太差要么是翻译太生硬。吐槽归吐槽，这本书基本把马斯克传奇的一生描绘了出来，还算及格吧。如果给这本书打一个分的话，我打 <code>★★☆☆☆</code> 不能再多。</p>
<p>这本书最大的功劳应该是让我的偶像从两个增加到了三个，他们分别是 <strong>克里斯蒂亚诺·罗纳尔多（C罗）</strong>、<strong>史蒂芬·乔布斯</strong> 以及 <strong>埃隆·马斯克</strong>。</p>
<blockquote>
<p>如果说乔布斯是硅谷的传奇，那么马斯克就是硅谷下一个传奇。</p>
</blockquote>
<p>对，你没猜错，上面这句话是我说的。从一开始创建 <code>zip2</code>、 <code>PayPel</code> 到现在的 <code>Telsa</code>、<code>spaceX</code>、<code>sun</code> 以及最近创办的隧道挖掘公司 <code>The Boring Company</code> ，马斯克在不断思考人类所面临的问题，同时将之付诸行动。他强大的想象力和执行力让人不禁感叹：太牛逼了！不过这还不算什么，有点抱负的都会去干一些伟大的事情，关键是他所创建或投资的这些公司都做到了行业的顶尖。 <code>Telsa</code>  上个月的市值刚超过福特汽车公司，成为美国市值最高的汽车公司； <code>spaceX</code> 是世界上第四个（前三是中美俄）有能力将火箭送上天的组织，是世界上第一个将火箭送上天的商业组织，并且它还是世界上第一个研制出火箭回收技术的组织（目前为止也是唯一一个）。<code>sun</code>差不多占了美国新能源市场一半的市场份额。而这三家公司的 boss 是马斯克。这也是为什么他被称为硅谷钢铁侠的原因。Amazing!</p>
<p>吊吊吊，不愧是我的偶像。再努力一把，把人类送上火星吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;这就是埃隆，不成功，便成仁，绝不放弃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在随后的几年里，马斯克考虑开设网络银行，并于1995年在品尼高研究所实习期间公开讨论过这件事。年轻的马斯克面向科学家做了精彩的演讲，宣称传统金融业向互联网金融的转变是不可避免的趋势。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他黑白分明的衡量成败的标准与竞争对手们的截然不同，导致得出的结论也大相径庭。这样的态度在局外人看来也许不可理喻，但正是这种极端的哲学鞭策着马斯克和他的团队不断突破世俗的条框，追求心中的极致。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当马斯克在 2014 年宣布特斯拉将公开其所有专利时，分析师们试图确定他是不是在作秀或者其中是否隐藏了不明动机或圈套&lt;br&gt;。但马斯克的决定就是这么坦率，他希望人们制造并购买电动汽车。马斯克认为，人类的未来取决于此。如果公开特斯拉的专利意味着其他公司能够更容易地制造出电动汽车，那么这对人类来说是有利的，这些理念应该是免费的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;马斯克是有情有义之人，他以一种史诗般的方式呈现喜怒哀乐，他感受最深刻的是自己改变人类命运的使命，因而难以意识到他人的强烈情绪，以致他富有人情味的一面被掩盖，令他显得冷酷无情，没有顾及个体的想法和需求。而很可能正是这种人，才能将太空网络的奇思妙想变成现实。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://hentaicracker.com/tag/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式 cheatsheet &amp; 实例</title>
    <link href="http://hentaicracker.com/2017/07/17/regexp/"/>
    <id>http://hentaicracker.com/2017/07/17/regexp/</id>
    <published>2017-07-17T07:53:57.000Z</published>
    <updated>2017-08-06T05:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>正则总结 &amp; 速查</strong>.</p>
<p>与其遇到复杂的正则表达式跑去直接搜结果还不如彻彻底底把正则表达式搞明白,搞透.要不然需求稍微一改就 GG 了.</p>
<a id="more"></a>
<h3 id="匹配字符"><a href="#匹配字符" class="headerlink" title="匹配字符"></a>匹配字符</h3><h4 id="字符组"><a href="#字符组" class="headerlink" title="字符组"></a>字符组</h4><p>只匹配一个字符.</p>
<ul>
<li><h4 id=""><a href="#" class="headerlink" title="[ - ]"></a>[ - ]</h4></li>
</ul>
<p>范围表示法, 使用连字符 “-“ 来省略和简写.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="number">123456</span>abcdefABCD] 可简写成 [<span class="number">1</span><span class="number">-6</span>a-fA-D]</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="-1"><a href="#-1" class="headerlink" title="[^ ]"></a>[^ ]</h4></li>
</ul>
<p>排除字符组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/[^abc]/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'abc abbc abbbc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// [" ", " ", " "]</span></div></pre></td></tr></table></figure></p>
<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table>
<thead>
<tr>
<th>元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>.</td>
<td>匹配除换行符、回车符、行分隔符和段分隔符除外以外的任意字符, 等价于 <code>[^\n\r\u2028\u2029]</code></td>
</tr>
<tr>
<td>\d</td>
<td>匹配一位数字, 等价于 <code>[0-9]</code></td>
</tr>
<tr>
<td>\D</td>
<td>匹配一位除数字外的任意字符, 等价于 <code>[^0-9]</code></td>
</tr>
<tr>
<td>\w</td>
<td>匹配字母, 数字, 下划线, 等价于 <code>[0-9a-zA-Z_]</code></td>
</tr>
<tr>
<td>\W</td>
<td>匹配非(字母, 数字, 下划线)的字符, 等价于 <code>[^0-9a-zA-Z_]</code></td>
</tr>
<tr>
<td>\s</td>
<td>匹配空白符, 包括空格、水平制表符、垂直制表符、换行符、回车符、换页符, 等价于 <code>[\t\v\n\r\f]</code></td>
</tr>
<tr>
<td>\S</td>
<td>匹配非空白符, 等价于 <code>[^\t\v\n\r\f]</code></td>
</tr>
<tr>
<td><code>[\d\D]</code>、<code>[\w\W]</code>、<code>[\s\S]</code>、<code>[^]</code></td>
<td>匹配任意字符</td>
</tr>
</tbody>
</table>
<h4 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h4><ul>
<li><h4 id="m-n"><a href="#m-n" class="headerlink" title="{m, n}"></a>{m, n}</h4></li>
</ul>
<p>横向模糊匹配,表示连续出现最少 m 次,最多 n 次. 属于贪婪匹配, 尽可能多地匹配.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/ab&#123;1,3&#125;c/g</span>;</div><div class="line"><span class="keyword">let</span> re1 = <span class="regexp">/ab&#123;2,&#125;c/g</span>; <span class="comment">// 表示至少出现 2 次</span></div><div class="line"><span class="keyword">let</span> re2 = <span class="regexp">/ab&#123;2&#125;c/g</span>; <span class="comment">// 等价于 &#123;2, 2&#125; , 表示出现 2 次</span></div><div class="line"><span class="keyword">let</span> str = <span class="string">'abc abbc abbbc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["abc", "abbc", "abbbc"]</span></div><div class="line">str.match(re1); <span class="comment">// ["abc", "abbc", "abbbc"]</span></div><div class="line">str.match(re2); <span class="comment">// ["abbc"]</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="-2"><a href="#-2" class="headerlink" title="?"></a>?</h4></li>
</ul>
<p>表示出现或者不出现, 等价于 <code>{0, 1}</code>, 惰性匹配.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/ab&#123;2,3&#125;?c/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'abc abbc abbbc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ab", "ab", "bc", "ab", "bb", "ab", "bb", "bc"]</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="-3"><a href="#-3" class="headerlink" title="+"></a>+</h4></li>
</ul>
<p>表示至少出现一次, 等价于 <code>{1,}</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/ab+/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'abc abbc abbbc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ab", "abb", "abbb", "abbbb"]</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="-4"><a href="#-4" class="headerlink" title="*"></a>*</h4></li>
</ul>
<p>表示出现任意次, 有可能会不出现, 等价于 <code>{0,}</code>.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/ab*c/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'ac abc abbc abbbc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ac", "abc", "abbc", "abbbc", "abbbbc"]</span></div></pre></td></tr></table></figure></p>
<h4 id="多选分支"><a href="#多选分支" class="headerlink" title="多选分支"></a>多选分支</h4><ul>
<li><h4 id="管道符"><a href="#管道符" class="headerlink" title="| (管道符)"></a>| (管道符)</h4></li>
</ul>
<p>可以理解为”或”, 具体形式为 <code>(p1|p2|p3)</code> , 表示其中任何之一. 也是惰性匹配, 即前面匹配上了后面就不匹配了.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/ab|abc/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'ac abc abbc abbbc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ab", "ab", "ab", "ab"]</span></div></pre></td></tr></table></figure></p>
<h3 id="匹配位置"><a href="#匹配位置" class="headerlink" title="匹配位置"></a>匹配位置</h3><p>位置是相邻字符之间的位置. 可以理解成 ‘’ 空字符, 如 <code>java</code> 等价于如下形式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">'java'</span> == <span class="string">''</span> + <span class="string">'j'</span> + <span class="string">''</span> + <span class="string">'a'</span> + <span class="string">''</span> + <span class="string">'v'</span> + <span class="string">''</span> + <span class="string">'a'</span>  + <span class="string">''</span>;</div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="-5"><a href="#-5" class="headerlink" title="^"></a>^</h4></li>
</ul>
<p>匹配开头, 在多行匹配中匹配行开头.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'JavaScript'</span>.match(<span class="regexp">/^/g</span>); <span class="comment">// [""]</span></div><div class="line"><span class="string">'JavaScript'</span>.replace(<span class="regexp">/^/g</span>, <span class="string">'I love '</span>); <span class="comment">// "I love JavaScript"</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="-6"><a href="#-6" class="headerlink" title="$"></a>$</h4></li>
</ul>
<p>匹配结尾, 在多行匹配中匹配行结尾.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">'JavaScript'</span>.match(<span class="regexp">/$/g</span>); <span class="comment">// [""]</span></div><div class="line"><span class="string">'JavaScript'</span>.replace(<span class="regexp">/$/g</span>, <span class="string">' is cool!'</span>); <span class="comment">// "JavaScript is cool!"</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="b-和-B"><a href="#b-和-B" class="headerlink" title="\b 和 \B"></a>\b 和 \B</h4></li>
</ul>
<p><code>\b</code> 匹配单词边界, <code>\w</code> 和 <code>\W</code> 之间的位置, <code>\w</code> 和 <code>^</code> (开头位置)之间的位置, 以及 <code>\w</code> 和 <code>$</code> (结尾位置)之间的位置.<br><code>\B</code> 匹配非 <code>\b</code> 的位置.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="string">'JavaScript(ES6) TypeScript2.1.4'</span>.replace(<span class="regexp">/\b/g</span>, <span class="string">'*'</span>); </div><div class="line"><span class="comment">// "*JavaScript*(*ES6*) *TypeScript2*.*1*.*4*"</span></div><div class="line"></div><div class="line"><span class="string">'JavaScript(ES6) TypeScript2.1.4'</span>.replace(<span class="regexp">/\B/g</span>, <span class="string">'*'</span>)</div><div class="line"><span class="comment">// "J*a*v*a*S*c*r*i*p*t(E*S*6)* T*y*p*e*S*c*r*i*p*t*2.1.4"</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="p-和-p"><a href="#p-和-p" class="headerlink" title="(?=p) 和 (?!p)"></a>(?=p) 和 (?!p)</h4></li>
</ul>
<p><code>(?=p)</code> 匹配 p 前面的位置.<br><code>(?!p)</code> 匹配 p 后面的位置.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">'JavaScript'</span>.replace(<span class="regexp">/(?=a)/g</span>, <span class="string">'*'</span>);</div><div class="line"><span class="comment">// "J*av*aScript"</span></div><div class="line"><span class="string">'JavaScript'</span>.replace(<span class="regexp">/(?!a)/g</span>, <span class="string">'*'</span>);</div><div class="line"><span class="comment">// "*Ja*va*S*c*r*i*p*t*"</span></div></pre></td></tr></table></figure>
<h3 id="括号分组"><a href="#括号分组" class="headerlink" title="括号分组"></a>括号分组</h3><ul>
<li><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/(ab)+/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'ac abc abbc ababc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ab", "ab", "abab", "ab"]</span></div><div class="line"></div><div class="line">re = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line">str = <span class="string">'2017-07-25'</span>;</div><div class="line">str.match(re); <span class="comment">// ["2017-07-25", "2017", "07", "25", index: 0, input: "2017-07-25"]</span></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>; <span class="comment">// "2017"</span></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">2</span>; <span class="comment">// "07"</span></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">3</span>; <span class="comment">// "25"</span></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">4</span>; <span class="comment">// ""</span></div><div class="line">str.replace(re, <span class="string">'$2/$3/$1'</span>); <span class="comment">// "07/25/2017"</span></div><div class="line"></div><div class="line">re = <span class="regexp">/^((\d)(\d(\d)))\1\2\3\4$/</span>; <span class="comment">// \n 代表 $n</span></div><div class="line">str = <span class="string">'1231231233'</span>;</div><div class="line">str.match(re); <span class="comment">// ["1231231233", "123", "1", "23", "3", index: 0, input: "1231231233"]</span></div></pre></td></tr></table></figure>
<p><strong>$n</strong>代表当前匹配分组第 n 个分组.</p>
<ul>
<li><h4 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h4></li>
</ul>
<p>(p1|p2)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/(ab|bc)+/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'ac abc abbc ababc abbcbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ab", "abbc", "abab", "abbcbc"]</span></div></pre></td></tr></table></figure></p>
<ul>
<li><h4 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h4></li>
</ul>
<p><code>(?:p)</code>, 非捕获分组不会引用分组, 也不会在正则表达式里反向引用.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/(?:ab)+/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'ac abc abbc ababc abbbbc'</span>;</div><div class="line">str.match(re); <span class="comment">// ["ab", "ab", "abab", "ab"]</span></div><div class="line"><span class="built_in">RegExp</span>.$<span class="number">1</span>; <span class="comment">// ""</span></div></pre></td></tr></table></figure></p>
<h3 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h3><table>
<thead>
<tr>
<th>flag</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>g</td>
<td>全局匹配</td>
</tr>
<tr>
<td>m</td>
<td>多行匹配</td>
</tr>
</tbody>
</table>
<h3 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h3><ol>
<li><code>\</code> 转义运算符</li>
<li><code>()</code>, <code>(?:)</code>, <code>(?=)</code>, <code>(?!)</code>, <code>[]</code></li>
<li><code>*</code>, <code>+</code>, <code>?</code>, <code>{n}</code>, <code>{n,}</code>, <code>{n,m}</code> 限定符</li>
<li><code>^</code>, <code>$</code> 位置</li>
<li><code>|</code> 多选分支</li>
</ol>
<h3 id="反斜杠匹配速查"><a href="#反斜杠匹配速查" class="headerlink" title="反斜杠匹配速查"></a>反斜杠匹配速查</h3><table>
<thead>
<tr>
<th>转义字符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>\t</td>
<td>横向制表符(tab)</td>
</tr>
<tr>
<td>\n</td>
<td>换行符</td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表符</td>
</tr>
<tr>
<td>\f</td>
<td>换页符</td>
</tr>
<tr>
<td>\r</td>
<td>回车符</td>
</tr>
<tr>
<td>\0</td>
<td>null</td>
</tr>
<tr>
<td>\.</td>
<td>.</td>
</tr>
<tr>
<td>\+</td>
<td>+</td>
</tr>
<tr>
<td>\*</td>
<td>*</td>
</tr>
<tr>
<td>\?</td>
<td>?</td>
</tr>
<tr>
<td>\^</td>
<td>^</td>
</tr>
<tr>
<td>\$</td>
<td>$</td>
</tr>
<tr>
<td>\[</td>
<td>[</td>
</tr>
<tr>
<td>\]</td>
<td>]</td>
</tr>
<tr>
<td>\(</td>
<td>(</td>
</tr>
<tr>
<td>\)</td>
<td>)</td>
</tr>
<tr>
<td>\\</td>
<td></td>
<td>\</td>
<td></td>
</tr>
<tr>
<td>\/</td>
<td>/</td>
</tr>
<tr>
<td>\</td>
<td>\</td>
</tr>
</tbody>
</table>
<h3 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(partern: <span class="built_in">RegExp</span> | string, flags?: string)</div></pre></td></tr></table></figure>
<ul>
<li><h4 id="exec-string-string-RegExpExecArray-null"><a href="#exec-string-string-RegExpExecArray-null" class="headerlink" title="exec(string: string): RegExpExecArray | null;"></a>exec(string: string): RegExpExecArray | null;</h4></li>
</ul>
<p><code>exec()</code> 方法进行搜索匹配, 返回一个结果数组或 <code>null</code> .<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/\d+/g</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'2017-07-25'</span>;</div><div class="line">re.exec(str); <span class="comment">// ["2017", index: 0, input: "2017-07-25"]</span></div><div class="line">re.lastIndex; <span class="comment">// 4</span></div><div class="line">re.exec(str); <span class="comment">// ["07", index: 5, input: "2017-07-25"]</span></div><div class="line">re.lastIndex; <span class="comment">// 7</span></div><div class="line">re.exec(str); <span class="comment">// ["25", index: 8, input: "2017-07-25"]</span></div><div class="line">re.lastIndex; <span class="comment">// 10</span></div><div class="line">re.exec(str); <span class="comment">// null</span></div><div class="line">re.lastIndex; <span class="comment">// 0</span></div></pre></td></tr></table></figure></p>
<p>每次 <code>exec</code> 方法都从 <code>lastIndex</code> 的下一个索引 <code>(index)</code> 开始, 在全局匹配模式 <code>(g)</code> 下, <code>lastIndex</code> 值都会改变, 非全局匹配模式下不变 ( <code>test</code> 方法同样适用).</p>
<ul>
<li><h4 id="test-string-string-boolean"><a href="#test-string-string-boolean" class="headerlink" title="test(string: string): boolean;"></a>test(string: string): boolean;</h4></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> re = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</div><div class="line"><span class="keyword">let</span> str = <span class="string">'2017-07-25'</span>;</div><div class="line">re.test(str); <span class="comment">// true</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;正则总结 &amp;amp; 速查&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;与其遇到复杂的正则表达式跑去直接搜结果还不如彻彻底底把正则表达式搞明白,搞透.要不然需求稍微一改就 GG 了.&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://hentaicracker.com/tag/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>String 踩坑</title>
    <link href="http://hentaicracker.com/2017/07/10/string/"/>
    <id>http://hentaicracker.com/2017/07/10/string/</id>
    <published>2017-07-10T02:30:15.000Z</published>
    <updated>2017-08-06T05:28:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理 <code>String</code> 实例方法以及一些需要注意的点.</p>
<a id="more"></a>
<h3 id="ES5"><a href="#ES5" class="headerlink" title="ES5"></a>ES5</h3><ul>
<li><h4 id="toString-string"><a href="#toString-string" class="headerlink" title="toString(): string;"></a>toString(): string;</h4></li>
</ul>
<p><code>String</code> 对象覆盖了 Object 对象的 toString 方法,该方法返回该对象的字符串形式,和 String.prototype.valueOf() 方法返回值一样.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'something'</span>);</div><div class="line">str.toString(); <span class="comment">// 'something'</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="charAt-pos-number-string"><a href="#charAt-pos-number-string" class="headerlink" title="charAt(pos: number): string;"></a>charAt(pos: number): string;</h4></li>
</ul>
<p><code>charAt</code> 方法返回一个字符串中指定的字符.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'something'</span>);</div><div class="line">str.charAt(<span class="number">0</span>); <span class="comment">// 's'</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="charCodeAt-index-number-number"><a href="#charCodeAt-index-number-number" class="headerlink" title="charCodeAt(index: number): number;"></a>charCodeAt(index: number): number;</h4></li>
</ul>
<p><code>charCodeAt</code> 方法返回给定索引处字符的 UTF-16 代码单元值的数字；如果索引超出范围,则返回 NaN.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'something'</span>);</div><div class="line">str.charCodeAt(<span class="number">0</span>); <span class="comment">// 115, 's'的 unicode 值.</span></div><div class="line">str.charCodeAt(<span class="number">9</span>); <span class="comment">// NaN</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="concat-…strings-string-string"><a href="#concat-…strings-string-string" class="headerlink" title="concat(…strings: string[]): string;"></a>concat(…strings: string[]): string;</h4></li>
</ul>
<p><code>concat</code> 方法将一个或多个字符串与原字符串连接合并，并返回一个新的字符串。concat 方法并不影响原字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'something'</span>);</div><div class="line">str.concat(<span class="string">' is'</span>, <span class="string">' wrong'</span>); <span class="comment">// 'something is wrong'.</span></div><div class="line">str; <span class="comment">// 'something'</span></div></pre></td></tr></table></figure>
<p>尽量使用 + 赋值操作符代替 concat 方法以提高性能.</p>
<ul>
<li><h4 id="indexOf-searchString-string-position-number-number"><a href="#indexOf-searchString-string-position-number-number" class="headerlink" title="indexOf(searchString: string, position?: number): number;"></a>indexOf(searchString: string, position?: number): number;</h4></li>
</ul>
<p><code>indexOf</code> 方法返回调用 String 对象中第一次出现的指定值的索引，从 position 开始<strong>从左向右</strong>进行搜索。</p>
<p>如果未找到该值，则返回-1。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'something'</span>);</div><div class="line">str.indexOf(<span class="string">'some'</span>); <span class="comment">// 0</span></div><div class="line">str.indexOf(<span class="string">'Some'</span>); <span class="comment">// -1, 区分大小写</span></div><div class="line">str.indexOf(<span class="string">'me'</span>, <span class="number">0</span>); <span class="comment">// 2</span></div><div class="line">str.indexOf(<span class="string">'me'</span>, <span class="number">5</span>); <span class="comment">// -1</span></div><div class="line">str.indexOf(<span class="string">'me'</span>, <span class="number">-1</span>); <span class="comment">// 2, 如果 position &lt; 0 则查找整个字符串（如同传进了 0）</span></div><div class="line">str.indexOf(<span class="string">''</span>, <span class="number">8</span>); <span class="comment">// 8</span></div><div class="line">str.indexOf(<span class="string">''</span>, <span class="number">9</span>); <span class="comment">// 9, 如果 position &gt;= str.length,且被查找的字符串是一个空字符串，此时返回 str.length</span></div><div class="line">str.indexOf(<span class="string">''</span>, <span class="number">10</span>); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="lastIndexOf-searchString-string-position-number-number"><a href="#lastIndexOf-searchString-string-position-number-number" class="headerlink" title="lastIndexOf(searchString: string, position?: number): number;"></a>lastIndexOf(searchString: string, position?: number): number;</h4></li>
</ul>
<p><code>lastIndexOf</code> 方法返回调用 String 对象中最后一次出现的指定值的索引，从 position 开始<strong>从右向左</strong>进行搜索。行为和 indexOf 方法一致.</p>
<ul>
<li><h4 id="localeCompare-that-string-number"><a href="#localeCompare-that-string-number" class="headerlink" title="localeCompare(that: string): number;"></a>localeCompare(that: string): number;</h4></li>
</ul>
<p><code>localeCompare</code> 方法返回一个数字表示是否 引用字符串 在排序中位于 比较字符串 的前面，后面，或者二者相同。</p>
<ul>
<li><p>当 引用字符串 在 比较字符串 前面时返回 -1</p>
</li>
<li><p>当 引用字符串 在 比较字符串 后面时返回 1</p>
</li>
<li><p>相同位置时返回 0</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'something'</span>);</div><div class="line">str.localeCompare(<span class="string">'a'</span>); <span class="comment">// 2 or 1, 不同浏览器可能返回不同的值.</span></div><div class="line">str.localeCompare(<span class="string">'yes'</span>); <span class="comment">// -2 or -1</span></div><div class="line">str.localeCompare(<span class="string">'something'</span>); <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="match-regexp-string-RegExp-RegExpMatchArray-null"><a href="#match-regexp-string-RegExp-RegExpMatchArray-null" class="headerlink" title="match(regexp: string | RegExp): RegExpMatchArray | null;"></a>match(regexp: string | RegExp): RegExpMatchArray | null;</h4></li>
</ul>
<p><code>match</code> 方法检索匹配 regexp 的项,如果 regexp 是一个非正则表达式对象,则会隐式地使用 new RegExp(regexp) 将其转换为一个 RegExp .如果没有匹配项,返回 null .</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.match(<span class="regexp">/o/</span>); <span class="comment">// ["o", index: 4, input: "hello world"], 没有 g 标志,返回和 RegExp.exec() 相同的结果</span></div><div class="line">str.match(<span class="string">'o'</span>); <span class="comment">// ["o", index: 4, input: "hello world"]</span></div><div class="line">str.match(<span class="regexp">/o/g</span>); <span class="comment">// ["o", "o"], 有 g 标志,返回一个 Array.</span></div><div class="line">str.match(<span class="regexp">/oo/</span>); <span class="comment">// null</span></div><div class="line">str.match(); <span class="comment">// [""]</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="replace-searchValue-string-RegExp-replaceValue-string-string"><a href="#replace-searchValue-string-RegExp-replaceValue-string-string" class="headerlink" title="replace(searchValue: string | RegExp, replaceValue: string): string;"></a>replace(searchValue: string | RegExp, replaceValue: string): string;</h4></li>
<li><h4 id="replace-searchValue-string-RegExp-replacer-substring-string-…args-any-gt-string-string"><a href="#replace-searchValue-string-RegExp-replacer-substring-string-…args-any-gt-string-string" class="headerlink" title="replace(searchValue: string | RegExp, replacer: (substring: string, …args: any[]) =&gt; string): string;"></a>replace(searchValue: string | RegExp, replacer: (substring: string, …args: any[]) =&gt; string): string;</h4></li>
</ul>
<p><code>replace</code> 方法返回一个由 replaceValue 替换匹配 searchValue 的一些值后的新字符串.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'Hello World'</span>);</div><div class="line">str.replace(<span class="regexp">/world/i</span>, <span class="string">'Chen'</span>); <span class="comment">// 'Hello Chen', i标志,不区分大小写</span></div><div class="line">str; <span class="comment">// 'Hello World'</span></div><div class="line">str.replace(); <span class="comment">// 'Hello World'</span></div><div class="line">str.replace(<span class="regexp">/world/</span>,<span class="string">'$$'</span>); <span class="comment">// "hello $", $$,特殊变量,插入一个'$'.</span></div><div class="line">str.replace(<span class="regexp">/world/</span>,<span class="string">'$&amp;'</span>); <span class="comment">// "hello world", $&amp;,特殊变量,插入匹配的子串</span></div><div class="line">str.replace(<span class="regexp">/world/</span>,<span class="string">'$`'</span>); <span class="comment">// "hello hello ", $`,特殊变量,插入当前匹配的子串左边的内容</span></div><div class="line">str.replace(<span class="regexp">/world/</span>,<span class="string">"$'"</span>); <span class="comment">// "hello ", $',特殊变量,插入当前匹配的子串右边的内容</span></div><div class="line">str.replace(<span class="regexp">/(\w+)\s(\w+)/</span>,<span class="string">"$2 $1"</span>); <span class="comment">// "world hello", $n,特殊变量,假如第一个参数是 RegExp对象，并且 n 是个小于100的非负整数，那么插入第 n 个括号匹配的字符串</span></div></pre></td></tr></table></figure>
<p><code>replace</code> 方法还可以指定一个函数作为第二个参数.当匹配执行后,该函数就会执行.(特殊变量不能在函数里使用),如果第一个参数是正则表达式,且为全局匹配(g)模式,那这个方法将多次被调用,每次匹配都会被调用.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.replace(<span class="regexp">/(l)(o)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, p1,p2,offset,string</span>)</span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(match); <span class="comment">// 'lo', 匹配项</span></div><div class="line">	<span class="built_in">console</span>.log(p1); <span class="comment">// 'l',正则表达式第一个括号匹配的内容</span></div><div class="line">	<span class="built_in">console</span>.log(p2); <span class="comment">// 'o',正则表达式第二个括号匹配的内容</span></div><div class="line">	<span class="built_in">console</span>.log(offset); <span class="comment">// 3,匹配项在原字符串的偏移量</span></div><div class="line">	<span class="built_in">console</span>.log(string); <span class="comment">// 'hello world',原字符串</span></div><div class="line">&#125;); <span class="comment">// 'helundefined world', 函数没有返回值,所以返回 undefined 插入到匹配项.</span></div><div class="line"></div><div class="line">str.replace(<span class="regexp">/(l)(o)/</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, p1,p2</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> [p1, p2].join(<span class="string">'-'</span>);</div><div class="line">&#125;); <span class="comment">// "hell-o world"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">str.replace(<span class="regexp">/(lo)|(ld)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">match, p1, p2</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(match); </div><div class="line">	<span class="keyword">if</span>(p1) <span class="built_in">console</span>.log(p1); </div><div class="line">	<span class="keyword">if</span>(p2) <span class="built_in">console</span>.log(p2);</div><div class="line">    count++;</div><div class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;count&#125;</span>`</span>;</div><div class="line">&#125;); </div><div class="line"><span class="comment">// "lo", match</span></div><div class="line"><span class="comment">// "lo", p1</span></div><div class="line"><span class="comment">// "ld", match</span></div><div class="line"><span class="comment">// "ld", p2</span></div><div class="line"><span class="comment">// "hel1 wor2", 全局匹配, replacer 被调用了两次.</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="split-separator-string-RegExp-limit-number-string"><a href="#split-separator-string-RegExp-limit-number-string" class="headerlink" title="split(separator: string | RegExp, limit?: number): string[];"></a>split(separator: string | RegExp, limit?: number): string[];</h4></li>
</ul>
<p><code>split</code> 方法将一个String对象分割成字符串数组，将字符串分成子串.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.split(); <span class="comment">// ["hello world"]</span></div><div class="line">str.split(<span class="string">''</span>); <span class="comment">// ["h", "e", "l", "l", "o", " ", "w", "o", "r", "l", "d"]</span></div><div class="line">str.split(<span class="string">''</span>, <span class="number">5</span>); <span class="comment">// ["h", "e", "l", "l", "o"]</span></div><div class="line">str.split(<span class="string">' '</span>); <span class="comment">// ["hello", "world"]</span></div><div class="line">str.split(<span class="string">'l'</span>); <span class="comment">// ["he", "", "o wor", "d"], 如果满足分割规则的两个部分紧邻着（即中间没有其他字符），则返回数组之中会有一个空字符串.</span></div><div class="line">str.split(<span class="regexp">/o/</span>); <span class="comment">// ["hell", " w", "rld"]</span></div><div class="line">str.split(<span class="regexp">/(o)/</span>); <span class="comment">// ["hell", "o", " w", "o", "rld"], 存在捕获括号时,匹配结果会包含在返回的数组中.</span></div><div class="line">str; <span class="comment">// 'hello world'</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="slice-start-number-end-number-string"><a href="#slice-start-number-end-number-string" class="headerlink" title="slice(start?: number, end?: number): string;"></a>slice(start?: number, end?: number): string;</h4></li>
</ul>
<p><code>slice</code> 方法从一个字符串中<strong>从左向右</strong>提取字符串并返回新的字符串,不会改变原字符串.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.slice(); <span class="comment">// "hello world"</span></div><div class="line">str.slice(<span class="number">1</span>); <span class="comment">// "ello world"</span></div><div class="line">str.slice(<span class="number">-1</span>); <span class="comment">// "d"</span></div><div class="line">str.slice(<span class="number">1</span>,<span class="number">4</span>); <span class="comment">// "ell"</span></div><div class="line">str.slice(<span class="number">1</span>,<span class="number">-4</span>); <span class="comment">// "ello w", 从第二个字符到倒数第五个</span></div><div class="line">str.slice(<span class="number">-6</span>,<span class="number">-4</span>); <span class="comment">// " w", 从倒数第七个字符开始到倒数第五个</span></div><div class="line">str.slice(<span class="number">-1</span>,<span class="number">4</span>); <span class="comment">// ""</span></div><div class="line">str; <span class="comment">// "hello world"</span></div><div class="line">str.slice(<span class="string">'a'</span>); <span class="comment">// "hello world", start 会强制转换为数字, 这里等同于 str.slice(NaN)</span></div><div class="line">str.slice(<span class="string">'5'</span>); <span class="comment">// " world"</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="substring-start-number-end-number-string"><a href="#substring-start-number-end-number-string" class="headerlink" title="substring(start: number, end?: number): string;"></a>substring(start: number, end?: number): string;</h4></li>
</ul>
<p><code>substring</code> 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集.类似 slice 方法,略有不同.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.substring(); <span class="comment">// "hello world"</span></div><div class="line">str.substring(<span class="number">1</span>); <span class="comment">// "ello world"</span></div><div class="line">str.substring(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// "", 如果 start 等于 end, 返回一个空字符串</span></div><div class="line">str.substring(<span class="number">-1</span>); <span class="comment">// "hello world"</span></div><div class="line">str.substring(<span class="number">1</span>,<span class="number">4</span>); <span class="comment">// "ell"</span></div><div class="line">str.substring(<span class="number">4</span>,<span class="number">1</span>); <span class="comment">// "ell", == str.substring(1, 4)</span></div><div class="line">str.substring(<span class="number">-1</span>, <span class="number">-4</span>); <span class="comment">// "", 如果任一参数小于 0 或为 NaN，则被当作 0</span></div><div class="line">str; <span class="comment">// "hello world"</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="substr-from-number-length-number-string"><a href="#substr-from-number-length-number-string" class="headerlink" title="substr(from: number, length?: number): string;"></a>substr(from: number, length?: number): string;</h4></li>
</ul>
<p><code>substr</code> 方法和 slice 方法类似,区别是 substr 第二个参数是指截取的长度.此方法不兼容上古 IE .</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.substr(); <span class="comment">// "hello world"</span></div><div class="line">str.substr(<span class="number">1</span>); <span class="comment">// "ello world"</span></div><div class="line">str.substr(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// "e"</span></div><div class="line">str.substr(<span class="number">0</span>, <span class="number">6</span>); <span class="comment">// "hello "</span></div><div class="line">str.substr(<span class="number">-1</span>, <span class="number">1</span>); <span class="comment">// "d", 从倒数第一个开始,截取长度为1的字符串返回</span></div><div class="line">str.substr(<span class="number">-20</span>, <span class="number">1</span>); <span class="comment">// "h", 如果 from 为负值且 abs(from) 大于字符串的长度，则 substr 使用 0 作为开始提取的索引</span></div><div class="line">str.substr(<span class="number">-20</span>, <span class="number">-1</span>); <span class="comment">// "", length 为 0 或 -1 则返回一个空字符串.</span></div><div class="line">str; <span class="comment">// "hello world"</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="toLowerCase-string"><a href="#toLowerCase-string" class="headerlink" title="toLowerCase(): string;"></a>toLowerCase(): string;</h4></li>
<li><h4 id="toUpperCase-string"><a href="#toUpperCase-string" class="headerlink" title="toUpperCase(): string;"></a>toUpperCase(): string;</h4></li>
</ul>
<p><code>toLowerCase</code> 方法转小写, toUpperCase 转大写.</p>
<ul>
<li><h4 id="trim-string"><a href="#trim-string" class="headerlink" title="trim(): string;"></a>trim(): string;</h4></li>
</ul>
<p><code>trim</code> 方法删除一个字符串的两端空白符,返回一个新的字符串,不会影响原字符串.</p>
<h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ul>
<li><h4 id="includes-searchString-string-position-number-boolean"><a href="#includes-searchString-string-position-number-boolean" class="headerlink" title="includes(searchString: string, position?: number): boolean;"></a>includes(searchString: string, position?: number): boolean;</h4></li>
</ul>
<p><code>includes</code> 方法判断 searchString 是否存在于原字符串中.区分大小写.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.includes(<span class="string">'Hello'</span>); <span class="comment">// false, 区分大小写</span></div><div class="line">str.includes(<span class="string">'he'</span>)；<span class="comment">// true</span></div><div class="line">str.includes(<span class="string">'he'</span>, <span class="number">1</span>); <span class="comment">// false, 从第二个位置开始找</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="startsWith-searchString-string-position-number-boolean"><a href="#startsWith-searchString-string-position-number-boolean" class="headerlink" title="startsWith(searchString: string, position?: number): boolean;"></a>startsWith(searchString: string, position?: number): boolean;</h4></li>
</ul>
<p><code>startsWith</code> 方法判断 searchString 是否是给定字符串为开头的.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.startsWith(<span class="string">'Hello'</span>); <span class="comment">// false, 区分大小写</span></div><div class="line">str.startsWith(<span class="string">'hello'</span>)；<span class="comment">// true</span></div><div class="line">str.startsWith(<span class="string">'world'</span>, <span class="number">6</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<ul>
<li><h4 id="repeat-count-number-string"><a href="#repeat-count-number-string" class="headerlink" title="repeat(count: number): string;"></a>repeat(count: number): string;</h4></li>
</ul>
<p><code>repeat</code> 方法返回一个被连接在一起的指定数量(count)的字符串的副本.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello world'</span>);</div><div class="line">str.repeat(<span class="number">0</span>); <span class="comment">// ""</span></div><div class="line">str.repeat(<span class="number">2</span>); <span class="comment">// "hello worldhello world"</span></div><div class="line">str.repeat(<span class="number">-1</span>); <span class="comment">// RangeError: Invalid count value, count 不能为负数,且必须小于 Infinity,且长度不会大于最长的字符串</span></div><div class="line">str.repeat(<span class="number">3.6</span>); <span class="comment">// "hello worldhello worldhello world", count 自动转换成整数</span></div></pre></td></tr></table></figure>
<p>参考资料:</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String" target="_blank" rel="external">MDN</a></li>
<li><a href="https://github.com/Microsoft/TypeScript/blob/master/lib/lib.es5.d.ts" target="_blank" rel="external">TypeScript Github</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整理 &lt;code&gt;String&lt;/code&gt; 实例方法以及一些需要注意的点.&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://hentaicracker.com/tag/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Tips</title>
    <link href="http://hentaicracker.com/2017/03/17/jsTips/"/>
    <id>http://hentaicracker.com/2017/03/17/jsTips/</id>
    <published>2017-03-17T03:14:39.000Z</published>
    <updated>2017-07-10T11:42:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>总结一下在工作中经常遇到的一些js处理方法。</p>
<a id="more"></a>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deduped = [ <span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>,<span class="string">'a'</span> ].filter(<span class="function"><span class="keyword">function</span> (<span class="params">el, i, arr</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> arr.indexOf(el) === i;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(deduped); <span class="comment">// [ 1, 'a']</span></div></pre></td></tr></table></figure>
<h4 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> deduped = [ <span class="number">1</span>, <span class="number">1</span>, <span class="string">'a'</span>,<span class="string">'a'</span> ].filter( (el, i, arr) =&gt; arr.indexOf(el) ===i );</div></pre></td></tr></table></figure>
<h4 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h4><p>当元素为对象(Object)时，我们就不能用这种办法了， 因为对象存储的是引用而原始变量存储的是值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; a: <span class="number">1</span> &#125; === &#123; a: <span class="number">1</span> &#125; <span class="comment">// false</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dedup</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">     <span class="keyword">var</span> hashTable = &#123;&#125;;</div><div class="line">     <span class="keyword">return</span> arr. filter(<span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> key = <span class="built_in">JSON</span>.stringify(el);</div><div class="line">          <span class="keyword">var</span> match = <span class="built_in">Boolean</span>(hashTable[key]);</div><div class="line">          <span class="keyword">return</span> (match ? <span class="literal">false</span> : hashTable[key] = <span class="literal">true</span>);</div><div class="line">     &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> deduped = dedup([</div><div class="line">        &#123; a: <span class="number">1</span> &#125;,</div><div class="line">        &#123; a: <span class="number">1</span> &#125;,</div><div class="line">        [ <span class="number">1</span>, <span class="number">2</span> ],</div><div class="line">        [ <span class="number">1</span>, <span class="number">2</span> ]</div><div class="line">]);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(deduped); <span class="comment">// [ &#123;a: 1&#125;, [1, 2] ]</span></div></pre></td></tr></table></figure>
<h3 id="多维数组扁平化"><a href="#多维数组扁平化" class="headerlink" title="多维数组扁平化"></a>多维数组扁平化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myArray = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]];</div><div class="line"><span class="comment">// 期望值[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div></pre></td></tr></table></figure>
<h4 id="使用concat-和apply"><a href="#使用concat-和apply" class="headerlink" title="使用concat()和apply()"></a>使用concat()和apply()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = [].concat.apply([], myArray);</div></pre></td></tr></table></figure>
<h4 id="使用reduce"><a href="#使用reduce" class="headerlink" title="使用reduce()"></a>使用reduce()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = myArray.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, curr</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> prev.concat(curr);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myArray.length; ++i) &#123;</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; myArray.length; ++j) &#123;</div><div class="line">          newArray.push(myArray[i][j]);</div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ES6展开符"><a href="#ES6展开符" class="headerlink" title="ES6展开符"></a>ES6展开符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = [].concat(...myArray);</div></pre></td></tr></table></figure>
<h3 id="数组平均值-amp-amp-中位数"><a href="#数组平均值-amp-amp-中位数" class="headerlink" title="数组平均值&amp;&amp;中位数"></a>数组平均值&amp;&amp;中位数</h3><h4 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> values = [<span class="number">2</span>, <span class="number">56</span>, <span class="number">3</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">100</span>, <span class="number">23</span>];</div><div class="line"><span class="keyword">let</span> sum = values.reduce((prev, curr) =&gt; curr += prev);</div><div class="line"><span class="keyword">let</span> avg = sum / values.length;</div><div class="line"><span class="comment">// avg = 28</span></div></pre></td></tr></table></figure>
<h4 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> values = [<span class="number">2</span>, <span class="number">56</span>, <span class="number">3</span>, <span class="number">41</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">100</span>, <span class="number">23</span>];</div><div class="line">values.sort((a, b) =&gt; a - b);</div><div class="line"><span class="keyword">let</span> lowMiddle = <span class="built_in">Math</span>.floor((values.length - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line"><span class="keyword">let</span> highMiddle = <span class="built_in">Math</span>.ceil((values.length - <span class="number">1</span>) / <span class="number">2</span>);</div><div class="line"><span class="keyword">let</span> median = (values[lowMiddle] + values[highMiddle]) / <span class="number">2</span>;</div><div class="line"><span class="comment">// median = 13.5</span></div></pre></td></tr></table></figure>
<p>如果是对象的话，JavaScript将引用按值传递。</p>
<h3 id="JS监听document是否加载完成"><a href="#JS监听document是否加载完成" class="headerlink" title="JS监听document是否加载完成"></a>JS监听document是否加载完成</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.readyState === <span class="string">'complete'</span>) &#123;</div><div class="line">     <span class="comment">// 页面已完全加载</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用document.readyState === ‘interactive’监听DOM是否加载完成。</p>
<h3 id="判断数据元素是否重复"><a href="#判断数据元素是否重复" class="headerlink" title="判断数据元素是否重复"></a>判断数据元素是否重复</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isRepeat = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line">     <span class="keyword">var</span> hash = &#123;&#125;;</div><div class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</div><div class="line">          <span class="keyword">if</span>(hash[arr[i]]) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">          hash[arr[i]] = <span class="literal">true</span>;</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">randombetween</span>(<span class="params">min, max</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> min + (<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="javascript对象浅拷贝-amp-深拷贝"><a href="#javascript对象浅拷贝-amp-深拷贝" class="headerlink" title="javascript对象浅拷贝&amp;深拷贝"></a>javascript对象浅拷贝&amp;深拷贝</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> obj = &#123; a: <span class="number">1</span>, b: &#123; c: <span class="number">2</span>&#125; &#125;;</div><div class="line">    <span class="keyword">var</span> copy = <span class="built_in">Object</span>.assign(&#123;&#125;, obj);  <span class="comment">// 拷贝源对象自身的并且可枚举的属性</span></div><div class="line">    <span class="built_in">console</span>.log(copy);      <span class="comment">// &#123; a: 1, b: &#123; c: 2&#125; &#125;</span></div><div class="line">    <span class="keyword">var</span> deepCopy = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(obj));</div><div class="line">    copy.a = <span class="number">2</span>;</div><div class="line">    copy.b.c = <span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(obj);       <span class="comment">// &#123; a: 1, b: &#123; c: 3&#125; &#125;</span></div><div class="line">    <span class="built_in">console</span>.log(copy);      <span class="comment">// &#123; a: 2, b: &#123; c: 3&#125; &#125;</span></div><div class="line">    <span class="built_in">console</span>.log(deepCopy);  <span class="comment">// &#123; a: 1, b: &#123; c: 2&#125; &#125;</span></div><div class="line">    deepCopy.a = <span class="number">4</span>;</div><div class="line">    deepCopy.b.c = <span class="number">5</span>;</div><div class="line">    <span class="built_in">console</span>.log(obj);       <span class="comment">// &#123; a: 1, b: &#123; c: 3&#125; &#125;</span></div><div class="line">    <span class="built_in">console</span>.log(copy);      <span class="comment">// &#123; a: 2, b: &#123; c: 3&#125; &#125;</span></div><div class="line">    <span class="built_in">console</span>.log(deepCopy);  <span class="comment">// &#123; a: 4, b: &#123; c: 5&#125; &#125;</span></div><div class="line">&#125;());</div></pre></td></tr></table></figure>
<h3 id="判断变量是否为数组"><a href="#判断变量是否为数组" class="headerlink" title="判断变量是否为数组"></a>判断变量是否为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// es5方法 Array.prototype.isArray();</span></div><div class="line"></div><div class="line"><span class="comment">// 通用判断类型方法</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arr) === <span class="string">'[object Array]'</span>;</div><div class="line">     <span class="comment">// [[NativeBrand]]内部属性的值一共有十几种.分别是:"Array", "Boolean", "Date", "Error", "Function", "Math", "Number", "Object", "RegExp", "String","JSON","Arguments". // es6: "Map","Set","Symbol"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="生成随机数-1"><a href="#生成随机数-1" class="headerlink" title="生成随机数"></a>生成随机数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(a) === <span class="string">'[object Array]'</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rank</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(!isArray(arr)) <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">return</span> arr.sort(() =&gt; <span class="number">0.5</span> - <span class="built_in">Math</span>.random());</div><div class="line">&#125;</div><div class="line">rank([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总结一下在工作中经常遇到的一些js处理方法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://hentaicracker.com/tag/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《人类简史》读书笔记</title>
    <link href="http://hentaicracker.com/2017/03/12/2017-03-12/"/>
    <id>http://hentaicracker.com/2017/03/12/2017-03-12/</id>
    <published>2017-03-12T07:31:59.000Z</published>
    <updated>2017-07-10T12:57:17.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>对智人来说，大脑只占身体总重约 2% ~ 3% ，但在身体休息而不活动时，大脑的能量消耗却占了25%。</p>
</li>
<li><p>人类另一项独有的特点，在于我们用两条腿直立行走。能够站起来，就更容易扫视整片草原，看看哪里有猎物或敌人，而且既然手不需负责移动身体，就能发挥其他用途，像是丢石块或是做信号。手能做的事情越来越多，可以说人就变得越厉害；于是人的演化也就越来越着重神经发展，也不断地对手掌和手指的肌肉做修正。于是人类的手开始能够处理非常精细的任务，特别是能够生产、使用复杂的工具。</p>
</li>
<li><p>除了存在于人类共同的想象之外，这个宇宙中根本没有神、没有国家、没有钱、没有人权、没有法律，也没有正义。</p>
</li>
<li><p>随着时间过去，想象现实也日益强大；时至今日，河流、树木和狮子想要生存，有时候还得依赖神、国家和企业这些想象现实行行好，放它们一马。</p>
</li>
<li><p>农业革命让人类的食物总量增加，但量的增加并不代表吃得更好、过得更悠闲，反而只是造成人口爆炸，而且产生一群养尊处优、娇生惯养的精英份子。普遍来说，农民的工作要比采集者更辛苦，而且到头来的饮食还要更糟。农业革命可以说是史上最大的一桩骗局。</p>
<a id="more"></a>
</li>
<li><p>谁该负责？这背后的主谋，既不是国王，不是牧师，也不是商人。真正的主要嫌疑人，就是那极少数的植物物种，其中包括小麦、稻米和马铃薯。人类以为自己驯化了植物，但其实是植物驯化了智人。</p>
</li>
<li><p>我们认为下面这些真理是不言而喻的：人人生而平等，造物者赋予他们若干不可剥夺的权利，其中包括生命和追求快感。</p>
</li>
<li><p>想象所构建出来的秩序总是有一夕崩溃的风险，因为这些秩序背后靠的都是虚构的故事，只要人们不再相信，一切就风云变色。</p>
</li>
<li><p>而满足基本需求之后，多余的钱就可以用来盖金字塔、到世界各地度假、资助竞选活动、提供资金给你最爱的恐怖组织或是投入股市再赚更多的钱，但对真正的犬儒主义者来说，这一切贪婪的事都毫无意义。</p>
</li>
<li><p>身为人类，我们不可能脱离想象所建构出的秩序。每一次我们以为自己打破了监狱的高墙、迈向自由的前方，其实只是到了另一间更大的监狱，把活动范围稍稍加以扩大。</p>
</li>
<li><p>文字本来应该是人类意识的仆人，但现在正在反扑为主。计算机并无法理解智人如何说话、感觉和编织梦想，所以我们现在反而是一种计算机能够理解的数字语言来教智人如何说话、感觉和编织梦想。</p>
</li>
<li><p>然而历史的铁则告诉我们，每一则由想象建构出来的秩序，都绝不会承认自己出于想象和虚构，而会大谈自己是自然、必然的结果。</p>
</li>
<li><p>一次又一次，人类要让社会有秩序的方法，就是会将成员分成各种想象出来的阶级，像是上等人、平民和奴隶；白人和黑人；贵族和平民；婆罗门和首陀罗；又或是富人和穷人。所有这些阶段，就是要让某些人在法律上、政治上或社会上高人一等，从而规范了数百万人的关系。</p>
</li>
<li><p>大多数社会政治阶级制度其实都没有逻辑或生物学的基础，不过就是由历史的偶然事件引起，再用虚构的故事延续壮大。</p>
</li>
<li><p>文化总会说，它只是禁止“不自然的事”。但从生物学的角度来看，这世界上根本没有什么是不自然的。只要有可能发生的事，就是自然。真正完全“不自然”的事，是指违背了自然规律，但这种事情根本就不会存在，所以也没有禁止的必要。</p>
</li>
<li><p>事实上，许多人认知的“自然”和“不自然”并不是生物学的概念，而是基督神学的概念。神学上所谓的“自然”，指的是“符合创造自然的神的旨意”。</p>
</li>
<li><p>自从法国大革命之后，全球人民逐渐同意“自由”和“平等”都是基本的价值观。然而这两者根本就互相抵触！想要确保“平等”，就得限制住那些比较突出的人；而要人人都能“自由”，也就必然影响所有人的平等。</p>
</li>
<li><p>就像两个不谐和音可以让音乐往前进，人类不同的想法、概念和价值观也能逼着我们思考、批评、重新评价。一切要求一致，反而让心灵呆滞。</p>
</li>
<li><p>不管是贝壳还是美元，它们的价值都存在于我们的共同想象当中。光是它们的化学结构、颜色或是形状，并无法带来哪些价值。换句话说，金钱并不是物质上的现实，而只是心理上的想象。所以，金钱的运作就是要把前者转变为后者。</p>
</li>
<li><p>金钱正是有史以来最普遍也最有效的互信系统。</p>
</li>
<li><p>在中国的统治阶级眼中，各个邻国及四方诸侯都是生活水深火热的蛮夷之邦，天朝中国应该泽被四方、广传华夏文化。所谓的天命为的不是剥削掠夺整个世界，而是要教化万民。同样，古罗马人也声称自己的统治理所当然，因为他们让野蛮人开始有了和平、正义，生命也更为高雅。像是他们说日耳曼民族生性野蛮，高卢人会画各种战妆，生活肮脏，为人无知，一直要到古罗马人到来，才用法律驯化了他们，用公共浴室让他们身体洁净，也用哲学让他们思想进步。公元前3世纪的孔雀王朝，也认为自己必须负起责任，将佛法传播到无知的世界。穆斯林哈里发也肩负着神圣的使命，要传播先知的启示，虽然最好是以和平的方式，但必要的时候也不惜一战。至于西班牙和葡萄牙帝国，他们也声称自己到印度和美洲不是为了财富，而是要让人改信真正的信仰。号称日不落的大英帝国，也是号称传播着自由主义和自由贸易的两大福音。苏联人更是觉得责无旁贷，必须协助推动这个历史的必然，从资本主义走向无产阶级的乌托邦。至于现代的许多美国人，他们也认为美国必须负起道义责任，让第三世界国家同样享有民主和人权，就算这得靠巡航导弹和F-16战机，也是在所不惜。</p>
</li>
<li><p>释迦牟尼认为，人遇到事情通常就会产生欲念，而欲念总是会造成不满。遇到不喜欢的事，就想躲开；遇到喜欢的事，就想维持并增加这份愉快。但正因为如此，人心就永远不满、永远不安。这点在碰上不悦的时候格外明显，像是感觉疼痛的时候，只要疼痛继续，我们就一直感到不满，用尽办法想要解决。然而，就算是遇上欢乐的事，我们也从不会真正满足，而是一直担心这种快乐终将结束或是无法再持续或增强。有些人多年来一直在寻找爱情，但等到真的找着了爱情，却还是不满足。有的开始整天担心对方可能会离开；有的又觉得自己太过屈就，应该再找更好的人。</p>
</li>
<li><p>究竟为什么要学历史？历史不像是物理学或经济学，目的不在于做出准确预测。我们之所以研究历史，不是为了要知道未来，而是要拓展视野，要了解现在的种种绝非“自然”，也并非无可避免。未来的可能性远超过我们的想象。举例来说，研究欧洲人究竟是如何控制了非洲人，我们就知道种族歧视绝非自然或无可避免，而且知道世界大有可能是完全不同的样貌。</p>
</li>
<li><p>发现美洲，对于科学革命是一大奠基事件。这不但让欧洲人知道实际的观察比过去的传统更重要，而且像征服美洲的欲望也让欧洲人开始求知若渴。</p>
</li>
<li><p>人类发展出“信用”这种金钱概念，代表着目前还不存在、只存在于想象中的货品。正是“信用”的概念，让我们能够预支未来、打造现在。</p>
</li>
<li><p>整个世界就像是一块大饼，切法各有不同，但总之就只有一个饼，不可能变得更大。</p>
</li>
<li><p>所谓的“资本主义”（Capitalism），认为“资本”（capital）与“财富”（wealth）有所不同。资本指的是投入生产的各种金钱、物品和资源。而财富指的则是那些埋在地下或是浪费在非生产性活动的金钱、物品和资源。</p>
</li>
<li><p>能抓到精髓的就是著名的新世纪（New Age）口号：“快乐来自内心。”金钱、社会地位、整形手术、豪宅、握有大权的职位，这些都不会给你带来快乐。想要有长期的快乐，只能靠血清素、多巴胺和催产素。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;对智人来说，大脑只占身体总重约 2% ~ 3% ，但在身体休息而不活动时，大脑的能量消耗却占了25%。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;人类另一项独有的特点，在于我们用两条腿直立行走。能够站起来，就更容易扫视整片草原，看看哪里有猎物或敌人，而且既然手不需负责移动身体，就能发挥其他用途，像是丢石块或是做信号。手能做的事情越来越多，可以说人就变得越厉害；于是人的演化也就越来越着重神经发展，也不断地对手掌和手指的肌肉做修正。于是人类的手开始能够处理非常精细的任务，特别是能够生产、使用复杂的工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除了存在于人类共同的想象之外，这个宇宙中根本没有神、没有国家、没有钱、没有人权、没有法律，也没有正义。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;随着时间过去，想象现实也日益强大；时至今日，河流、树木和狮子想要生存，有时候还得依赖神、国家和企业这些想象现实行行好，放它们一马。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;农业革命让人类的食物总量增加，但量的增加并不代表吃得更好、过得更悠闲，反而只是造成人口爆炸，而且产生一群养尊处优、娇生惯养的精英份子。普遍来说，农民的工作要比采集者更辛苦，而且到头来的饮食还要更糟。农业革命可以说是史上最大的一桩骗局。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://hentaicracker.com/tag/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《You don&#39;t know JavaScirpt》</title>
    <link href="http://hentaicracker.com/2017/01/08/ydkjs-1/"/>
    <id>http://hentaicracker.com/2017/01/08/ydkjs-1/</id>
    <published>2017-01-08T05:18:16.000Z</published>
    <updated>2017-01-12T12:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Up-amp-Going"><a href="#Up-amp-Going" class="headerlink" title="Up &amp; Going"></a>Up &amp; Going</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>你最近学的一个新东西是什么？</p>
<p>也许是一门像意大利语或德语这样的外语，也许是一款图形编辑器，比如 Photoshop ，或者是一项烹饪技巧、木工以及日常训练。我想要你记住学习时刻的那种愉快的感觉。当事情从模糊变得清晰的时候，当你掌握了锯子或你明白了法语中男性的名词与女性的差别。那感觉咋样？很爽是吧？</p>
<p>现在我需要你重新回忆一下你学习新技能之前的那种感觉。可能有点略微胆怯或有点迷惑，对吧？在一开始的时候，我们都不知道那些我们现在知道的东西，这些都OK，我们总是从某一点开始。学习新的技能是一个激动人心的挑战，特别是你渴望快速学习一项主题的时候。</p>
<p>我给很多初学者教了一些编码课程，那些上我课的学生经常通过阅读博客或复制粘贴代码来自学一些像是 HTML 或 JavaScript 的这样的语言，但是他们还没有真正的掌握那些能让他们写出想要的效果的学习资料。因为他们没有真正的抓住那些正确的输入输出，当他们不知道发生了什么的时候，他们就无法写出强大的代码或 debug 他们的代码。</p>
<p>我总是以在以一种合适的方式来上课，web 标准，语义化标签，友好的代码，和其他最好的练习。每个课题我会通透地解释怎么做以及为什么，而不仅仅是把代码丢出去复制粘贴。当你努力去理解你写的代码时，你的工作会变得越来越好。编码不仅仅是你的工作，它是你的一门手艺。这就是为什么我喜欢天天向上。</p>
<p>我为什么要翻译这些无聊的东西啊~~~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Up-amp-Going&quot;&gt;&lt;a href=&quot;#Up-amp-Going&quot; class=&quot;headerlink&quot; title=&quot;Up &amp;amp; Going&quot;&gt;&lt;/a&gt;Up &amp;amp; Going&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla
    
    </summary>
    
    
      <category term="翻译" scheme="http://hentaicracker.com/tag/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>2016 &amp; 2017</title>
    <link href="http://hentaicracker.com/2016/12/31/2016-12-31/"/>
    <id>http://hentaicracker.com/2016/12/31/2016-12-31/</id>
    <published>2016-12-31T09:18:54.000Z</published>
    <updated>2016-12-31T09:48:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>（语无伦次，慎重欣赏好文。）</p>
<a id="more"></a>
<p>工作快半年，学到了很多东西。不仅仅是技术上的进步，包括做事以及做人。</p>
<p>每天的晨会，在刚来深圳的时候，我只知道汇报昨天我干了什么，工作的进度是什么样的。后来逐渐意识到这样的汇报毫无意义。因为boss不知道你的下一步计划是什么。给人的感觉就像做事情没有Plan B。</p>
<p>所以抓住2016的尾巴，在最后的时间里，除了总结这一年，也要展望明年。</p>
<p>2016年初失落，年中毕业，年末快乐夹杂焦虑。算是心情起伏比较大的一年。像往年一样，得再说一遍，失去了一些东西，收获了一些东西。先说今年都做了些什么吧。今年看了<strong>《我们仨》《白夜行》《乔布斯传》《血色浪漫》《围城》《人类简史》《JavaScript语言精粹》《NodeJS实战》《http权威指南》《AngularJS》</strong>…记得的也就这些吧，年初看的给忘了。今年去的地方：<strong>合肥、黄山、嘉兴、深圳、香港、惠州、广州从化</strong>。今年去了左叔的现场，算是了了一个小小的心愿。看过的电影听过的歌就不说了。</p>
<p>2017年的计划。书单：<strong>《资本论》《一半是火焰一半是海水》《许三观卖血记》《解忧杂货店》《css揭秘》《don’t make me think》《JavaScript面向对象编程指南》《JavaScript设计模式与开发实践》《you don’t know javascript》</strong>。要去的地方：<strong>澳门、甘肃</strong>。另外，<strong>70kg</strong>。跑步里程：<strong>200km</strong>，骑行里程：<strong>500km</strong>。</p>
<p>2017注定是忙碌的一年，在这一年里需要沉淀的东西很多。因为还有很多想要做的事情等着我去完成。</p>
<p>今年年初的时候决定这一年要好好地沉淀自己，我做到了。</p>
<p>我发现我喜欢上了一个人。</p>
<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>
<p><strong>王菲</strong>。</p>
]]></content>
    
    <summary type="html">
    
      2016总结 &amp; 2017展望
    
    </summary>
    
    
      <category term="日常" scheme="http://hentaicracker.com/tag/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>《围城》读书笔记</title>
    <link href="http://hentaicracker.com/2016/11/16/2016-11-16/"/>
    <id>http://hentaicracker.com/2016/11/16/2016-11-16/</id>
    <published>2016-11-16T12:13:30.000Z</published>
    <updated>2016-12-05T12:28:31.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>有几个教师皱着眉头，那记录的女生涨红脸停笔不写，仿佛听了渐鸿最后的一句，处女的耳朵已经当众丧失贞操。</p>
</li>
<li><p>方渐鸿住家一个星期，感觉出国这四年光阴，对家乡好像荷叶上泻过的水，留不下一点痕迹。</p>
</li>
<li><p>他记得《三国演义》里的名言：“妻子如衣服”，当然衣服也就等于妻子；他现在新添了皮外套，损失个把老婆才不放在心上呢。</p>
</li>
<li><p>为什么爱情会减少一个人的心灵的抵抗力，使人变得软弱，被摆布呢。</p>
<a id="more"></a></li>
<li><p>因为在大学里，理科学生瞧不起文科学生，外国语文系学生瞧不起中国文学系学生，中国文学系学生瞧不起哲学系学生，哲学系学生瞧不起社会系学生，社会学学生瞧不起教育系学生，教育系学生没有谁可以给他们瞧不起了，只能瞧不起本系的先生。</p>
</li>
<li><p>他深知自己写的英文富有英国人言论自由和美国人宣言独立的精神，不受文法拘束的，不然真想仗外国文来跟唐小姐亲爱，正像政治犯躲在外国租借里活动。</p>
</li>
<li><p>褚慎明危坐不说话，像內视着潜意识深处的趣事而微笑，比了他那神秘的笑容，蒙娜丽莎的笑算不得什么一回事。</p>
</li>
<li><p>他引一句英国古话，说结婚仿佛金漆的鸟笼，笼子外面的鸟想住进去，笼内的鸟想飞出来；所以结而离，离而结，没有了局。</p>
</li>
<li><p>被围困的城堡，城外的人想冲进去，城里的人想逃出来。</p>
</li>
<li><p>渐鸿追想他的国文先生都叫不响，不比罗素、陈散原这些名字，像一支上等哈瓦那雪茄烟，可以挂在口边卖弄。</p>
</li>
<li><p>心里疑惑，不敢发问，怕斜川笑自己外行人不通。</p>
</li>
<li><p>据说曹元朗在十五岁的时早下决心不结婚，一见了苏小姐，十五年来的人生观像大地震时的日本房屋。</p>
</li>
<li><p>同乡一位庸医是他邻居，仰慕他的名望，杀人有暇，偶来陪他闲谈。</p>
</li>
<li><p>以前愚民政策是不许人民受教育，现代愚民政策是只许人民受某一种教育。不受教育的人，因为不识字，上人的当，受教育的人，因为识了字，上印刷品的当，像你们的报纸宣传品、训练干部讲义之类。</p>
</li>
<li><p>我知道她难看，可是因为她是我们的恩人，我不忍细看她。对于丑人，细看是一种残忍——除非他是坏人，你要惩罚他。</p>
</li>
<li><p>这就是生离死别比百年团聚好的地方，它能使人不老。不但鬼不会长大，不见了好久的朋友，在我们心里，还是当年的风采，尽管我们自己已经老了。</p>
</li>
<li><p>方渐鸿笑道：“政治家聚在一起，当然是乌烟瘴气”。</p>
</li>
<li><p>渐鸿一惊，想不到孙小姐随身配备这样完全，平常以为她不修饰的脸原来也是件艺术作品。</p>
</li>
<li><p>两亲家见过面，彼此请过客，往来拜访过，心里还交换过鄙视，谁也不满意谁。</p>
</li>
</ul>
<p>以上是读《围城》留下来的一些有意思的文字。<strong>爱情就像被围困的城堡，城外的人想冲进去，城里的人想逃出来。</strong>/摊手</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;有几个教师皱着眉头，那记录的女生涨红脸停笔不写，仿佛听了渐鸿最后的一句，处女的耳朵已经当众丧失贞操。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方渐鸿住家一个星期，感觉出国这四年光阴，对家乡好像荷叶上泻过的水，留不下一点痕迹。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他记得《三国演义》里的名言：“妻子如衣服”，当然衣服也就等于妻子；他现在新添了皮外套，损失个把老婆才不放在心上呢。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为什么爱情会减少一个人的心灵的抵抗力，使人变得软弱，被摆布呢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://hentaicracker.com/tag/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《血色浪漫》读书笔记</title>
    <link href="http://hentaicracker.com/2016/10/29/2016-10-29/"/>
    <id>http://hentaicracker.com/2016/10/29/2016-10-29/</id>
    <published>2016-10-29T02:19:21.000Z</published>
    <updated>2016-11-16T12:51:59.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>谁的裤裆开了，露出这么个东西来？</p>
</li>
<li><p>不过，无论什么样的思想内容，音乐和舞蹈的艺术魅力还是为这个革命故事增添了几许浪漫的色彩，成为按个特殊年代青年人在仅有的娱乐形式中最受欢迎的一种。</p>
</li>
<li><p>世上的事要靠努力得来，而不是靠随缘。</p>
</li>
<li><p>钟跃民似乎有点儿明白了，这是人类的一种习性，你缺少什么就向往什么，物质生活的极端匮乏需要精神力量的支撑，面对自身的痛苦时，常常表现出一种无奈的求变通的情绪，这就是苦中做乐，借以稀释现实的苦难。</p>
</li>
<li><p>任何艺术都应该在它特定的情境下才能最大限度地表现出永恒的魅力。</p>
</li>
<li><p>你这个人太“轴”，知道什么叫“轴”吗？这是北京人形容爱钻牛角尖的人常用的一个词。</p>
</li>
<li><p>钟跃民说：“不知哪位名人说过，当你咽气的时候，花完兜里的最后一块钱，这话说得很有道理，我是一个热爱金钱的人，钱这东西总让人牵肠挂肚，多以，我不想留下让我牵挂的东西。”</p>
</li>
<li><p>他们号召人们起来屠杀，点燃人们的仇恨之火，煽动人们的极端无政府主义狂热，他们以自由的名义剥夺无辜公民的自由，以平等的名义屠杀贵族，以国家安全的名义践踏法律，践踏人类的尊严，践踏人类至高无上的生命权。</p>
</li>
</ul>
<a id="more"></a>
<p>以上是读《血色浪漫》看到的一些有意思并且值得留下来的文字，可惜这么厚的一本书被我挑拣得剩了这么一点真是惭愧。这本书读完有些日子了，一直没空出时间来写点东西。</p>
<p>这本书主要描写了文革这个动乱而又富有激情的时期，一群青年的奋斗和爱情故事。不过那个年代的爱情是建立在鲜血与痛苦之上的。粗读一遍，学到的以及了解的东西甚少。都梁的文字真是富有感染力，每次打开看都是在欢乐中度过的。欢乐之余，不免会有更多对于那个年代的思考，人们在极端匮乏的物质生活中苦中作乐，青春成长的代价却是鲜血与痛苦。</p>
<p>曾和朋友说很羡慕那个年代，大家有足够的时间去做自己的事情，并且对于一个东西（且不讨论其正确与否）充满着热情，充满着狂热，并愿意为之奉献自己一生。</p>
<p>说起来，你是不是已经有很久没有对某一件事或某一个人而狂热了？</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;谁的裤裆开了，露出这么个东西来？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不过，无论什么样的思想内容，音乐和舞蹈的艺术魅力还是为这个革命故事增添了几许浪漫的色彩，成为按个特殊年代青年人在仅有的娱乐形式中最受欢迎的一种。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;世上的事要靠努力得来，而不是靠随缘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;钟跃民似乎有点儿明白了，这是人类的一种习性，你缺少什么就向往什么，物质生活的极端匮乏需要精神力量的支撑，面对自身的痛苦时，常常表现出一种无奈的求变通的情绪，这就是苦中做乐，借以稀释现实的苦难。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;任何艺术都应该在它特定的情境下才能最大限度地表现出永恒的魅力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;你这个人太“轴”，知道什么叫“轴”吗？这是北京人形容爱钻牛角尖的人常用的一个词。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;钟跃民说：“不知哪位名人说过，当你咽气的时候，花完兜里的最后一块钱，这话说得很有道理，我是一个热爱金钱的人，钱这东西总让人牵肠挂肚，多以，我不想留下让我牵挂的东西。”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;他们号召人们起来屠杀，点燃人们的仇恨之火，煽动人们的极端无政府主义狂热，他们以自由的名义剥夺无辜公民的自由，以平等的名义屠杀贵族，以国家安全的名义践踏法律，践踏人类的尊严，践踏人类至高无上的生命权。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="读书" scheme="http://hentaicracker.com/tag/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>我是荒野大镖客，这是我的利器</title>
    <link href="http://hentaicracker.com/2016/10/13/liqi/"/>
    <id>http://hentaicracker.com/2016/10/13/liqi/</id>
    <published>2016-10-13T01:34:13.000Z</published>
    <updated>2016-11-16T12:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍一下你自己和所做的工作"><a href="#介绍一下你自己和所做的工作" class="headerlink" title="介绍一下你自己和所做的工作"></a>介绍一下你自己和所做的工作</h2><p>我是<strong>陈俊生</strong>，是一名刚刚毕业努力为祖国社会主义而奋斗的前端工程师，坐标深圳。</p>
<a id="more"></a>
<h2 id="你都在使用哪些硬件"><a href="#你都在使用哪些硬件" class="headerlink" title="你都在使用哪些硬件"></a>你都在使用哪些硬件</h2><p>在公司主要是在一台<code>Linux</code> PC工作站上工作，连着两台24寸显示器。</p>
<p><code>Macbook pro 13</code> 2015，家用。一般周末拿来学习写点代码放<a href="https://github.com/hentaicracker" target="_blank" rel="external">gayhub</a>以及咖啡馆装逼。当然下班回去也会拿来逛逛<code>A站</code>啥的，无奈国内大部分视频网站都是用的<code>flash</code>，再加上<code>chrome</code>耗电神器，本本都快烫得脸红了。</p>
<p><code>iPhone 5s</code>，苹果业界良心，这款出来了三年的手机到现在运行<code>ios9.3.5</code>依然比较流程。4.0屏幕我最爱，再往上单手操作想把屏幕的四个角都控住简直比“我奶奶都能进这个球”还难。</p>
<p><code>Kindle paperwhite 3</code>，睡前阅读。</p>
<p>啊，苹果装逼全家桶就只差一个<code>iPad pro</code>了。 （逃</p>
<h2 id="软件呢"><a href="#软件呢" class="headerlink" title="软件呢"></a>软件呢</h2><p>软件我能BB一整天。</p>
<h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><ul>
<li><code>ubuntu 16.04 LTS</code>，linux自不必说，开发体验一级棒，刚进公司时用了一个月windows，实在受不了折磨与煎熬，果断上了linux。<code>flatabulous</code> theme，如图为主题</li>
</ul>
<p><img src="/img/liqi2.png" alt="flatabulous"></p>
<p>是不是很熟悉</p>
<p><img src="/img/huaji.png" alt="滑稽"></p>
<ul>
<li><p><code>VS Code</code>，主力编辑器，<code>typescript</code>预编译神器。速度很快，全平台支持，微软黑科技良心产品。</p>
</li>
<li><p><code>Sublime text 3</code>，副编辑器，拿来看开发文档，看接口用。之前用的<code>Atom</code>，虽然很好用，缺点是太慢了。</p>
</li>
<li><p><code>vim</code>，终端里修改文件时用。偶尔玩一玩，有买HHKB键盘的冲动。附上我的<a href="https://github.com/hentaicracker/.vimrc/blob/master/.vimrc" target="_blank" rel="external">vim配置</a>。</p>
</li>
<li><p><code>chrome</code>，前端开发必备浏览器。</p>
</li>
<li><p><code>iTerm2</code>，<code>MacOS</code>上第三方终端，加上<code>oh-my-zsh</code>，开发体验一级棒。</p>
</li>
<li><p><code>Zeal</code>，API DOCS，linux上良心文档软件，完全免费，相比<code>MacOS</code>上的<code>Dash</code>就好多啦。不过<code>Dash</code>的logo要好看点。</p>
</li>
<li><p><code>Evernote</code>，印象笔记，用过的人都说好。</p>
</li>
<li><p><code>马克飞象</code>，写<code>markdown</code>神器，可同步到印象笔记。</p>
</li>
<li><p><code>github</code>，全球最大同性交流社区。</p>
</li>
<li><p><code>office online</code>，微软又一良心产品，一些公司的文档直接在浏览器上打开编辑，与<code>Microsoft office</code>无任何差别。</p>
</li>
<li><p><code>shadowsocks</code>，科学上网利器，强烈推荐。</p>
</li>
<li><p><code>lantern</code>，蓝灯，科学上网，每个月有定向流量。</p>
</li>
</ul>
<h4 id="学习-amp-娱乐"><a href="#学习-amp-娱乐" class="headerlink" title="学习 &amp; 娱乐"></a>学习 &amp; 娱乐</h4><ul>
<li><p><code>sketch</code>，专业的ui设计软件。</p>
</li>
<li><p><code>adobe effects cc</code>，视频特效制作。</p>
</li>
<li><p><code>adobe premiere cc</code>，视频剪辑。偶尔做做视频玩玩。</p>
</li>
<li><p><code>adobe photoshop cc</code>，ps。</p>
</li>
<li><p><code>pocket</code>，非常不错的稍后阅读软件，chrome上看到一些好文，保存到pocket，没事的时候翻开看看。</p>
</li>
<li><p><code>feedly</code>，rss订阅软件，免费的，很不错。</p>
</li>
<li><p><code>Acfun</code>，AC基佬聚集地。</p>
</li>
</ul>
<h2 id="你最理想的工作环境是什么"><a href="#你最理想的工作环境是什么" class="headerlink" title="你最理想的工作环境是什么"></a>你最理想的工作环境是什么</h2><ol>
<li>有妹子。</li>
<li>良好的团队氛围，和一群聪明人共事。</li>
<li>盆栽。</li>
</ol>
<h2 id="你平时获得工作灵感的方式有哪些"><a href="#你平时获得工作灵感的方式有哪些" class="headerlink" title="你平时获得工作灵感的方式有哪些"></a>你平时获得工作灵感的方式有哪些</h2><p>我一直觉得如果只是把产品经理给你的原型转换成了真实的产品，那样思维会受到局限，因为你只是刻板地去实现，而没有一点自己的想法和创意。这样也许能使得自己逻辑更加合理，思维更加缜密，但是缺乏创造性。所以我经常会去做一些不让自己创造力流失的活动。</p>
<p>比如写作，比如画画，比如做视频，比如玩木雕。适当地培养一点自己的艺术气息以及审美。</p>
<p>获取信息的渠道有很多，然而信息爆炸的今天有99%的信息对你都是没用的。我主要的信息来源有掘金，微博以及A站。掘金是一个高质量的技术社区，很多前沿技术都能第一时间发表文章。微博关注了一些技术大牛以及我所感兴趣的领域。A站的话，锟斤拷锟斤拷锟斤拷锟斤拷锟斤拷。国内的新闻都带有一定的导向性，没有一点营养。从初中就开始看新闻的我直到大四才明白这个道理真是可悲。</p>
<p>运动也是必不可少的，喜欢跑步，也喜欢骑行运动，为此我特地买了一辆公路车，每周进行三四次傍晚骑行运动。</p>
<h2 id="推荐一件生活中的利器给大家"><a href="#推荐一件生活中的利器给大家" class="headerlink" title="推荐一件生活中的利器给大家"></a>推荐一件生活中的利器给大家</h2><p>还是<code>kindle</code>，爱不释手。</p>
<p>本文参与了「利器社群计划」，发现更多创造者和他们的工具：<a href="http://liqi.io/community/" target="_blank" rel="external">利器社群计划</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍一下你自己和所做的工作&quot;&gt;&lt;a href=&quot;#介绍一下你自己和所做的工作&quot; class=&quot;headerlink&quot; title=&quot;介绍一下你自己和所做的工作&quot;&gt;&lt;/a&gt;介绍一下你自己和所做的工作&lt;/h2&gt;&lt;p&gt;我是&lt;strong&gt;陈俊生&lt;/strong&gt;，是一名刚刚毕业努力为祖国社会主义而奋斗的前端工程师，坐标深圳。&lt;/p&gt;
    
    </summary>
    
    
      <category term="利器" scheme="http://hentaicracker.com/tag/%E5%88%A9%E5%99%A8/"/>
    
  </entry>
  
</feed>
